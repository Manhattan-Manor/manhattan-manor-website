---
import logo from "../assets/images/logo-yellow-gold.svg";
import { LanguageSelector } from "astro-i18next/components";
import { t } from "i18next";
import { Image } from 'astro:assets';
---

<nav class="navbar" id="navbar">
  <div class="container">
    <div class="logo-div">
      <button class="sound-btn" id="sound-btn" aria-label="Sound">
        <i class="bi bi-volume-up-fill"></i>
        <span>{t("common.sound")}</span>
      </button>
      <a class="navbar-brand" href="#">
        <Image src={logo} alt="Manhattan Manor Logo" width={30} height={48} />
      </a>
    </div>
    <div style="display: inherit;">
      <ul class="menu">
        <li>
          <a href="https://nye.manhattanmanor.com/">New Year's Eve Party</a>
        </li>
        <li>
          <LanguageSelector
            class="language-selector"
            title="Language Selector"
          />
        </li>
      </ul>
      <div class="sidenav">
        <button
          class="sidenav__button btn text-light fs-3"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#sidenav"
          aria-label="Open side menu"
          aria-expanded="false"
          aria-controls="sidenav"
        >
          <i class="bi bi-list"></i>
        </button>
        <div class="sidenav__content collapse" id="sidenav">
          <div class="container">
            <a href="#balldrop-section">{t("common.nye")}</a>
            <a href="#who-we-are-section">{t("who-we-are")}</a>
            <a href="#venues-section">{t("venues")}</a>
            <a href="#services-section">{t("our-services")}</a>
            <a href="#team-section">{t("our-team")}</a>
            <a href="#news-section">{t("common.news")}</a>
            <a href="#upcoming-events-section">{t("upcoming-events")}</a>
            <a href="#instagram-section">Instagram</a>
            <a href="#gallery-section">{t("gallery")}</a>
            <a href="#testimonials-section">{t("testimonials")}</a>
            <a href="#find-us-section">{t("find-us")}</a>
            <a href="#clients-section">{t("clients")}</a>
            <a href="#vendors-section">{t("vendors")}</a>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<style lang="scss">
  @import "../assets/styles/_colors.scss";

  .navbar {
    position: fixed !important;
    width: 100%;
    background: transparent;
    z-index: 10;
    transition: top 0.3s;

    .menu {
      display: flex;
      justify-content: space-between;
      align-items: center;
      list-style: none;
      margin: 0;
      padding: 0;

      li {
        text-transform: uppercase;
        margin-left: 20px;
        font-size: 14px;

        &:nth-child(3) a {
          color: white;
        }
      }

      a {
        text-decoration: none;
      }
    }

    .drawer-toggler {
      background: transparent;
      border: none;
      cursor: pointer;
      color: white;
      font-size: 20px;
      font-weight: 700;
    }

    .sound-btn {
      background: transparent;
      border: none;
      cursor: pointer;
      color: white;
      font-size: 14px;
      display: flex;
      align-items: center;

      span {
        display: none;

        @media (min-width: 768px) {
          display: inline;
          text-transform: uppercase;
        }
      }

      i {
        font-size: 20px;
        margin-right: 5px;
      }
    }

    .logo-div {
      display: flex;
      align-items: center;
    }

    .navbar-brand {
      margin-left: 20px;
      transition: 0.5s ease-in-out;
      opacity: 0;
    }

    .container {
      max-width: 1100px;
    }
  }

  .language-selector {
    background: transparent;
    border: none;
    cursor: pointer;
    color: white;
    font-size: 14px;
    display: flex;
    align-items: center;
    text-transform: uppercase;
  }

  .sidenav {
    overflow: hidden;

    &__content {
      position: absolute;
      background: rgba(0, 0, 0, 0.5);
      width: 100%;
      left: 0;
      z-index: 10;
      margin-top: 9px;

      a {
        display: block;
        padding: 10px 20px;
        color: white;
        text-decoration: none;
        font-size: 1rem;
        text-align: right;

        &:hover {
          color: $primary;
          transition-duration: 0.5s;
        }

        &.active {
          color: $primary;
          border-bottom: 1px solid $primary;
        }
      }
    }
  }
</style>

<script>
  import { t } from "i18next";

  const navbar = document.querySelector(".navbar") as HTMLElement;
  window.onscroll = function () {
    // If we are after the balldrop section, set the navbar to be black and the navbar-brand visible
    const navbarBrand = navbar.querySelector(".navbar-brand") as HTMLElement;
    if (window.pageYOffset > 200) {
      navbar.style.backgroundColor = "black";
      navbar.style.color = "white";
      navbar.style.backgroundColor = "rgba(0, 0, 0, 0.5)";
      navbar.style.transition = "background-color 0.5s";
      navbarBrand!.style.opacity = "1";
    } else {
      navbar.style.color = "black";
      navbar.style.backgroundColor = "transparent";
      navbarBrand!.style.opacity = "0";
    }
  };

  // Check window width on load and detect if we are on mobile, also check on resize
  const isMobile = () => window.innerWidth <= 760;
  const adaptWords = (spaLink: HTMLElement, nyeLink: HTMLElement) => {
    if (isMobile()) {
      // If we are on mobile, change ESPAÑOL to SPA and NEW YEAR'S EVE to NYE
      if (spaLink) spaLink.innerHTML = t("common.spanish.abbreviated") || "SPA";
      if (nyeLink) nyeLink.innerHTML = t("common.nye.abbreviated") || "NYE";
    } else {
      // If we are on desktop, change SPA to ESPAÑOL and NYE to NEW YEAR'S EVE
      if (spaLink) spaLink.innerHTML = t("common.spanish") || "ESPAÑOL";
      if (nyeLink) nyeLink.innerHTML = t("common.nye") || "NEW YEAR'S EVE";
    }
  };

  const spaLink = document.querySelector("#spa-link") as HTMLElement;
  const nyeLink = document.querySelector("#nye-link") as HTMLElement;
  adaptWords(spaLink, nyeLink);

  window.addEventListener("resize", () => {
    adaptWords(spaLink, nyeLink);
  });

  // Sound button
  const video = document.getElementById("background-video") as HTMLVideoElement;
  const soundButton = document.getElementById("sound-btn") as HTMLButtonElement;

  if (video && soundButton) {
    soundButton.addEventListener("click", () => {
      if (video.muted) {
        video.muted = false;
        soundButton.innerHTML = `<i class="bi bi-volume-up-fill"></i><span> MUTE</span>`;
        // Add margin to the icon
        const icon = soundButton.querySelector("i");
        if (icon) icon.style.marginRight = "5px";
        // Set volume to 0.5
        video.volume = 0.5;
      } else {
        video.muted = true;
        soundButton.innerHTML = `<i class="bi bi-volume-up-fill"></i><span> SOUND</span>`;
        // Add margin to the icon
        const icon = soundButton.querySelector("i");
        if (icon) icon.style.marginRight = "5px";
      }
    });
  }

  // Show sidenav
  const sidenav = document.querySelector(".sidenav") as HTMLElement;
  const sidenavContent = document.querySelector(
    ".sidenav__content"
  ) as HTMLElement;
  if (sidenav && sidenavContent)
    sidenav.addEventListener("click", () => {
      if (sidenavContent.style.display === "block") {
        sidenavContent.style.display = "none";
      } else {
        sidenavContent.style.display = "block";
      }
    });


    // Triggers the ScrollIntoview animation if the content is not visible in the viewport
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll("a[href^='#']").forEach(link => {
      link.addEventListener('click', function(event) {
        event.preventDefault();
        const targetId = this.getAttribute('href');
        const targetElement = document.querySelector(targetId);

        history.pushState({}, '', targetId);

        targetElement.scrollIntoView({ behavior: 'smooth' });

        let intervalId: any;
        let userScrolling = false;

        const handleUserScroll = () => {
          userScrolling = true;
          clearInterval(intervalId);
          window.removeEventListener('wheel', handleUserScroll);
        };

        window.addEventListener('wheel', handleUserScroll);

        const checkVisibility = () => {
          const rect = targetElement.getBoundingClientRect();
          const isVisible = rect.top < window.innerHeight && rect.bottom > 0;

          if (isVisible || userScrolling) {
            clearInterval(intervalId);
            window.removeEventListener('wheel', handleUserScroll); 
          } else {
            targetElement.scrollIntoView({ behavior: 'smooth' });
          }
        };

        intervalId = setInterval(checkVisibility, 800);
      });
    });
  });
</script>
